[{"H:\\movie-party\\client\\src\\index.js":"1","H:\\movie-party\\client\\src\\App.js":"2","H:\\movie-party\\client\\src\\components\\Join\\JoinRoom.js":"3","H:\\movie-party\\client\\src\\components\\Socket.js":"4","H:\\movie-party\\client\\src\\utils\\adjectives.js":"5","H:\\movie-party\\client\\src\\components\\Panel\\Chat\\Chat.js":"6","H:\\movie-party\\client\\src\\components\\Panel\\QueueHistory\\QueueItem.js":"7","H:\\movie-party\\client\\src\\components\\Room\\Room.js":"8","H:\\movie-party\\client\\src\\utils\\generateWords.js":"9","H:\\movie-party\\client\\src\\utils\\nouns.js":"10","H:\\movie-party\\client\\src\\components\\Panel\\Chat\\Messages\\Messages.js":"11","H:\\movie-party\\client\\src\\components\\Panel\\Chat\\ChatInput\\ChatInput.js":"12","H:\\movie-party\\client\\src\\reportWebVitals.js":"13","H:\\movie-party\\client\\src\\components\\Panel\\Panel.js":"14","H:\\movie-party\\client\\src\\utils\\userInfo.js":"15","H:\\movie-party\\client\\src\\components\\Panel\\Chat\\Messages\\Message\\Message.js":"16","H:\\movie-party\\client\\src\\components\\Panel\\QueueHistory\\QueueHistory.js":"17","H:\\movie-party\\client\\src\\components\\Panel\\Settings\\Settings.js":"18","H:\\movie-party\\client\\src\\components\\Panel\\Users\\Users.js":"19","H:\\movie-party\\client\\src\\components\\Video\\Player\\Player.js":"20","H:\\movie-party\\client\\src\\components\\Video\\Search\\Search.js":"21","H:\\movie-party\\client\\src\\components\\Video\\Video.js":"22","H:\\movie-party\\client\\src\\components\\Video\\Player\\Slider.js":"23","H:\\movie-party\\client\\src\\components\\Video\\Search\\SearchResults\\SearchResults.js":"24","H:\\movie-party\\client\\src\\components\\Video\\Search\\SearchResults\\ListItem.js":"25","H:\\movie-party\\client\\src\\components\\Panel\\QueueHistory\\QueueList.js":"26"},{"size":500,"mtime":1607979670262,"results":"27","hashOfConfig":"28"},{"size":610,"mtime":1608086017717,"results":"29","hashOfConfig":"28"},{"size":1519,"mtime":1608086091328,"results":"30","hashOfConfig":"28"},{"size":203,"mtime":1608581933702,"results":"31","hashOfConfig":"28"},{"size":61931,"mtime":1608084660500,"results":"32","hashOfConfig":"28"},{"size":1123,"mtime":1608160664691,"results":"33","hashOfConfig":"28"},{"size":1362,"mtime":1608160078345,"results":"34","hashOfConfig":"28"},{"size":8347,"mtime":1608451080749,"results":"35","hashOfConfig":"28"},{"size":657,"mtime":1608084633733,"results":"36","hashOfConfig":"28"},{"size":25528,"mtime":1608084676671,"results":"37","hashOfConfig":"28"},{"size":614,"mtime":1608160416802,"results":"38","hashOfConfig":"28"},{"size":1295,"mtime":1608160537306,"results":"39","hashOfConfig":"28"},{"size":362,"mtime":1607979670262,"results":"40","hashOfConfig":"28"},{"size":2727,"mtime":1608450961369,"results":"41","hashOfConfig":"28"},{"size":1113,"mtime":1608175517295,"results":"42","hashOfConfig":"28"},{"size":2334,"mtime":1608160368841,"results":"43","hashOfConfig":"28"},{"size":2661,"mtime":1608160001345,"results":"44","hashOfConfig":"28"},{"size":3532,"mtime":1608160727345,"results":"45","hashOfConfig":"28"},{"size":743,"mtime":1608158515890,"results":"46","hashOfConfig":"28"},{"size":13365,"mtime":1608449623783,"results":"47","hashOfConfig":"28"},{"size":5687,"mtime":1608457035202,"results":"48","hashOfConfig":"28"},{"size":6980,"mtime":1608455115954,"results":"49","hashOfConfig":"28"},{"size":7918,"mtime":1608449673208,"results":"50","hashOfConfig":"28"},{"size":1326,"mtime":1607978263296,"results":"51","hashOfConfig":"28"},{"size":1508,"mtime":1607978263296,"results":"52","hashOfConfig":"28"},{"size":622,"mtime":1608161116388,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ljog0t",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"65"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"H:\\movie-party\\client\\src\\index.js",[],"H:\\movie-party\\client\\src\\App.js",[],["114","115"],"H:\\movie-party\\client\\src\\components\\Join\\JoinRoom.js",[],"H:\\movie-party\\client\\src\\components\\Socket.js",[],"H:\\movie-party\\client\\src\\utils\\adjectives.js",[],["116","117"],"H:\\movie-party\\client\\src\\components\\Panel\\Chat\\Chat.js",[],["118","119"],"H:\\movie-party\\client\\src\\components\\Panel\\QueueHistory\\QueueItem.js",[],"H:\\movie-party\\client\\src\\components\\Room\\Room.js",["120"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { store } from 'react-notifications-component';\r\nimport invert from 'invert-color';\r\nimport { getRandomColor } from '../../utils/userInfo';\r\nimport { Dimmer, Loader, Transition } from 'semantic-ui-react';\r\nimport { generateWords } from '../../utils/generateWords';\r\nimport Panel from \"../Panel/Panel\";\r\nimport Video from '../Video/Video';\r\nimport { sckt } from '../Socket';\r\nimport './Room.scss';\r\nimport { getVideoType } from '../../utils/video';\r\n\r\nconst Room = ({ location, history, match }) => {\r\n\r\n    const playerRef = useRef(null);\r\n    const [currUser, setCurrUser] = useState({\r\n        id: '',\r\n        name: JSON.parse(localStorage.getItem('name')),\r\n        colors: JSON.parse(localStorage.getItem('colors'))\r\n    });\r\n    const [room, setRoom] = useState('');\r\n    const [videoProps, setVideoProps] = useState({\r\n        queue: [],\r\n        history: [],\r\n        playing: true,\r\n        seekTime: 0,\r\n        receiving: false,\r\n        initVideo: false,\r\n        videoType: 'yt' // 'vimeo', 'twitch', 'soundcloud'\r\n    });\r\n    const [users, setUsers] = useState([]);\r\n    const [isJoined, setIsJoined] = useState(false);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('name', JSON.stringify(currUser.name));\r\n    }, [currUser.name])\r\n    useEffect(() => {\r\n        localStorage.setItem('colors', JSON.stringify(currUser.colors));\r\n    }, [currUser.colors])\r\n\r\n    useEffect(() => {\r\n        const handler = ({ users }) => setUsers(users);\r\n        sckt.socket.on(\"roomData\", handler);\r\n        return () => sckt.socket.off('roomData', handler);\r\n    }, []);\r\n    const updateCurrUser = (paramsToChange) => {\r\n        setCurrUser((prev) => ({ ...prev, ...paramsToChange }));\r\n    }\r\n    const updateVideoProps = (paramsToChange) => {\r\n        setVideoProps((prev) => ({ ...prev, ...paramsToChange }));\r\n    }\r\n    const sendVideoState = ({ eventName, eventParams }) => {\r\n        let params = {\r\n            name: currUser.name,\r\n            room: room,\r\n            eventName: eventName,\r\n            eventParams: eventParams\r\n        };\r\n        sckt.socket.emit('sendVideoState', params, (error) => { });\r\n    };\r\n\r\n    // Video.js\r\n    const loadVideo = (searchItem, sync) => {\r\n        const { playing, seekTime, initVideo } = videoProps;\r\n        if ((playerRef.current !== null || !initVideo) && searchItem) {\r\n            if (!initVideo) updateVideoProps({ initVideo: true });\r\n            let videoUrl = searchItem.video.url;\r\n            if (sync) {\r\n                updateVideoProps({ url: videoUrl });\r\n                updateVideoProps({ playing });\r\n                updateVideoProps({ receiving: false });\r\n                playerRef.current.seekTo(seekTime, 'seconds');\r\n            } else {\r\n                updateVideoProps({ url: videoUrl });\r\n                updateVideoProps({ playing: true });\r\n                updateVideoProps({ receiving: false });\r\n            }\r\n            // sckt.socket.emit('updateRoomData', { video: searchItem }, (error) => { });\r\n        }\r\n    }\r\n    const playVideoFromSearch = (searchItem) => {\r\n        const url = searchItem.video.url;\r\n        const videoType = getVideoType(url);\r\n        if (videoType !== null) {\r\n            updateVideoProps({ videoType });\r\n        }\r\n        // Handle playing video immediately\r\n        const { history } = videoProps;\r\n        loadVideo(searchItem, false);\r\n        sendVideoState({\r\n            eventName: \"syncLoad\",\r\n            eventParams: { searchItem, history: [searchItem, ...history] }\r\n        });\r\n        updateVideoProps({ history: [searchItem, ...history] });\r\n    }\r\n    const log = (msg, type) => {\r\n        let baseStyles = [\r\n            \"color: #fff\",\r\n            \"background-color: #444\",\r\n            \"padding: 2px 4px\",\r\n            \"border-radius: 2px\"\r\n        ].join(';');\r\n        let serverStyles = [\r\n            \"background-color: gray\"\r\n        ].join(';');\r\n        let otherStyles = [\r\n            \"color: #eee\",\r\n            \"background-color: red\"\r\n        ].join(';');\r\n        let meStyles = [\r\n            \"background-color: green\"\r\n        ].join(';');\r\n        // Set style based on input type\r\n        let style = baseStyles + ';';\r\n        switch (type) {\r\n            case \"server\": style += serverStyles; break;\r\n            case \"other\": style += otherStyles; break;\r\n            case \"me\": style += meStyles; break;\r\n            case \"none\": style = ''; break;\r\n            default: break;\r\n        }\r\n        console.log(`%c${msg}`, style);\r\n    }\r\n    // From JoinRoom.js \r\n    useEffect(() => {\r\n        const room = match.params.roomName.trim();\r\n        if (room.length > 0) {\r\n            sckt.socket.emit('checkRoomExists', { room }, (exists) => {\r\n                // We set location.state in JoinRoom.js\r\n                if (exists || location.state) {\r\n                    setRoom(room);\r\n                    let name = currUser.name;\r\n                    if (!name) { // If no name in localStorage\r\n                        name = generateWords({ delimiter: ' ', shouldCap: true })\r\n                        updateCurrUser({ name });\r\n                    }\r\n                    let colors = currUser.colors;\r\n                    // if (!colors) { // If no colors in localStorage\r\n                    //     const bg = getRandomColor();\r\n                    //     const txt = invertColor(bg);\r\n                    //     colors = { bg, txt };\r\n                    //     updateCurrUser({ colors });\r\n                    // }\r\n                    const bg = getRandomColor();\r\n                    const txt = invert(bg);\r\n                    colors = { bg, txt };\r\n                    updateCurrUser({ colors });\r\n\r\n                    sckt.socket.emit('join', { name, room, colors }, ({ id }) => {\r\n                        updateCurrUser({ id });\r\n                        setTimeout(() => {\r\n                            setIsJoined(true);\r\n                        }, 750);\r\n                    });\r\n                } else {\r\n                    history.push('/');\r\n                    store.addNotification({\r\n                        title: \"Oops!\",\r\n                        message: `It seems like the room \"${room}\" doesn't exist. Go ahead and create a new room!`,\r\n                        type: \"danger\",\r\n                        insert: \"top\",\r\n                        container: \"bottom-right\",\r\n                        animationIn: [\"animated\", \"fadeInUp\"],\r\n                        animationOut: [\"animated\", \"fadeOut\"],\r\n                        dismiss: {\r\n                            duration: 5000,\r\n                            onScreen: false\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        // sckt.socket.emit('createRoom', { room }, () => {});\r\n        // sckt.socket.on(\"roomData\", ({ users }) => {\r\n        //     setUsers(users);\r\n        // });\r\n    }, [location.pathname, history]);\r\n\r\n    // useEffect(() => {\r\n    //     console.log(videoProps.playing);\r\n    // }, [videoProps.playing])\r\n\r\n    return (\r\n        <div className=\"outerContainer\">\r\n            <Transition visible={!isJoined} animation='fade' duration={500}>\r\n                <Dimmer active={!isJoined}>\r\n                    <Loader>Joining Room...</Loader>\r\n                </Dimmer>\r\n            </Transition>\r\n            <Video\r\n                log={log}\r\n                currUser={currUser}\r\n                room={room}\r\n                videoProps={videoProps}\r\n                updateVideoProps={updateVideoProps}\r\n                playerRef={playerRef}\r\n                sendVideoState={sendVideoState}\r\n                loadVideo={loadVideo}\r\n                playVideoFromSearch={playVideoFromSearch}\r\n            />\r\n            <Panel\r\n                currUser={currUser}\r\n                updateCurrUser={updateCurrUser}\r\n                room={room}\r\n                history={history}\r\n                videoProps={videoProps}\r\n                updateVideoProps={updateVideoProps}\r\n                playerRef={playerRef}\r\n                sendVideoState={sendVideoState}\r\n                playVideoFromSearch={playVideoFromSearch}\r\n                users={users}\r\n                setUsers={setUsers}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Room;",["121","122"],"H:\\movie-party\\client\\src\\utils\\generateWords.js",[],"H:\\movie-party\\client\\src\\utils\\nouns.js",[],"H:\\movie-party\\client\\src\\components\\Panel\\Chat\\Messages\\Messages.js",[],["123","124"],"H:\\movie-party\\client\\src\\components\\Panel\\Chat\\ChatInput\\ChatInput.js",[],"H:\\movie-party\\client\\src\\reportWebVitals.js",[],"H:\\movie-party\\client\\src\\components\\Panel\\Panel.js",[],"H:\\movie-party\\client\\src\\utils\\userInfo.js",[],"H:\\movie-party\\client\\src\\components\\Panel\\Chat\\Messages\\Message\\Message.js",[],"H:\\movie-party\\client\\src\\components\\Panel\\QueueHistory\\QueueHistory.js",[],"H:\\movie-party\\client\\src\\components\\Panel\\Settings\\Settings.js",[],"H:\\movie-party\\client\\src\\components\\Panel\\Users\\Users.js",[],"H:\\movie-party\\client\\src\\components\\Video\\Player\\Player.js",["125","126"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport ReactPlayer from \"react-player\";\r\nimport screenful from \"screenfull\";\r\nimport Controls from \"./Controls\";\r\n\r\nimport './Player.scss';\r\n\r\nlet count = 0;\r\n\r\nfunction iOS() {\r\n    return [\r\n        'iPad Simulator',\r\n        'iPhone Simulator',\r\n        'iPod Simulator',\r\n        'iPad',\r\n        'iPhone',\r\n        'iPod'\r\n    ].includes(navigator.platform)\r\n        // iPad on iOS 13 detection\r\n        || (navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document)\r\n}\r\n\r\nfunction Player({ videoProps, sendVideoState, updateVideoProps, loadVideo, loadFromQueue, playerRef }) {\r\n    const [isVideoStarted, setIsVideoStarted] = useState(false);\r\n    const [isVideoEnded, setIsVideoEnded] = useState(false);\r\n    const [state, setState] = useState({\r\n        pip: false,\r\n        playing: false,\r\n        light: false,\r\n        muted: false,\r\n        played: 0,\r\n        duration: 0,\r\n        playbackRate: 1.0,\r\n        volume: 1.0,\r\n        seeking: false,\r\n        isFullscreen: false,\r\n        jumpedTime: 0\r\n    });\r\n\r\n    const playerContainerRef = useRef(null);\r\n    const controlsRef = useRef(null);\r\n\r\n    const currentTime = (playerRef && playerRef.current) ? playerRef.current.getCurrentTime() : 0;\r\n    const duration = (playerRef && playerRef.current) ? playerRef.current.getDuration() : 0;\r\n    // const elapsedTime = timeDisplayFormat == \"normal\" ? format(currentTime) : `-${format(duration - currentTime)}`;\r\n    // const totalDuration = format(duration);\r\n\r\n    const {\r\n        light,\r\n        muted,\r\n        playbackRate,\r\n        pip,\r\n        seeking,\r\n        volume,\r\n        isFullscreen,\r\n        jumpedTime\r\n    } = state;\r\n\r\n    const {\r\n        queue,\r\n        history,\r\n        playing,\r\n        seekTime,\r\n        receiving,\r\n        initVideo,\r\n        videoType\r\n    } = videoProps;\r\n\r\n    const handlePlayPause = () => {\r\n        const seekTime = playerRef.current.getCurrentTime();\r\n        if (playing) {\r\n            // Going to pause\r\n            updateVideoProps({\r\n                playing: false,\r\n                seekTime,\r\n                receiving: false\r\n            });\r\n            sendVideoState({\r\n                eventName: 'syncPause',\r\n                eventParams: { seekTime }\r\n            });\r\n            if (isVideoEnded) playerRef.current.seekTo(0);\r\n            // console.log(\"PAUSING\")\r\n        } else {\r\n            // Going to play\r\n            updateVideoProps({\r\n                playing: true,\r\n                seekTime,\r\n                receiving: false\r\n            });\r\n            sendVideoState({\r\n                eventName: 'syncPlay',\r\n                eventParams: { seekTime }\r\n            });\r\n            // console.log(\"PLAYING\")\r\n        }\r\n    };\r\n\r\n    const handleRewind = () => {\r\n        let newTime = playerRef.current.getCurrentTime() - 10;\r\n        if (newTime < 0) newTime = 0;\r\n        playerRef.current.seekTo(newTime);\r\n        setState({ ...state, seeking: true, jumpedTime: newTime });\r\n        sendVideoState({\r\n            eventName: 'syncPlay',\r\n            eventParams: { seekTime: newTime }\r\n        });\r\n    };\r\n\r\n    const handleFastForward = () => {\r\n        let newTime = playerRef.current.getCurrentTime() + 10;\r\n        if (duration && newTime > duration) newTime = duration;\r\n        playerRef.current.seekTo(newTime);\r\n        setState({ ...state, seeking: true, jumpedTime: newTime });\r\n        sendVideoState({\r\n            eventName: 'syncPlay',\r\n            eventParams: { seekTime: newTime }\r\n        });\r\n    };\r\n\r\n    const handleProgress = (changeState) => {\r\n        if (count > 1) {\r\n            hideControls();\r\n            count = 0;\r\n        }\r\n        if (controlsRef.current.style.opacity === 1) {\r\n            count += 1;\r\n        }\r\n        if (!seeking) {\r\n            setState({ ...state, ...changeState });\r\n        }\r\n    };\r\n    const handleSeekMouseDown = (newTime) => {\r\n        // // const newTime = getProgressBarTime(e);\r\n        // newTime = newTime[0]\r\n        console.log(\"DOWN\", newTime);\r\n        // // setState({ ...state, seeking: true, played: parseFloat(newTime / 100) });\r\n        // playerRef.current.seekTo(newTime, \"seconds\");\r\n        // sendVideoState({\r\n        //     eventName: 'syncSeek',\r\n        //     eventParams: { seekTime: newTime }\r\n        // });\r\n    };\r\n    const handleSeek = (newTime) => {\r\n        newTime = newTime[0];\r\n        if (newTime < 0) newTime = 0;\r\n        else if (duration && newTime > duration) newTime = duration;\r\n        setState({ ...state, seeking: true, jumpedTime: newTime });\r\n        playerRef.current.seekTo(newTime, \"seconds\");\r\n        sendVideoState({\r\n            eventName: 'syncSeek',\r\n            eventParams: { seekTime: newTime }\r\n        });\r\n    }\r\n    const handleVolumeChange = (newValue) => {\r\n        newValue = newValue[0];\r\n        if (newValue < 0) newValue = 0;\r\n        else if (newValue > 1) newValue = 1;\r\n        setState({\r\n            ...state,\r\n            volume: parseFloat(newValue),\r\n            muted: newValue === 0 ? true : false,\r\n        });\r\n    };\r\n\r\n    const toggleFullScreen = () => {\r\n        screenful.toggle(playerContainerRef.current);\r\n    }\r\n    const handleMouseMove = () => {\r\n        showControls();\r\n        count = 0;\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setTimeout(function () {\r\n            hideControls();\r\n            count = 0;\r\n        }, 200);\r\n    };\r\n\r\n    const handlePlaybackRate = (rate) => {\r\n        if (rate === 0) rate = 0.5;\r\n        setState({ ...state, playbackRate: rate });\r\n        updateVideoProps({ receiving: false });\r\n        let eventParams = { playbackRate: rate };\r\n        sendVideoState({\r\n            eventName: 'syncRateChange',\r\n            eventParams: eventParams\r\n        });\r\n    };\r\n\r\n    const handleMute = () => {\r\n        setState({ ...state, muted: !muted });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!iOS())\r\n            screenful.on('change', () => setState({ ...state, isFullscreen: screenful.isFullscreen }));\r\n    }, [])\r\n\r\n    const showControls = () => {\r\n        if (isVideoStarted || iOS()) {\r\n            controlsRef.current.style.opacity = 1;\r\n            controlsRef.current.style.pointerEvents = \"auto\";\r\n            controlsRef.current.style.cursor = \"auto\";\r\n            playerContainerRef.current.style.cursor = \"auto\";\r\n        }\r\n    }\r\n    const hideControls = () => {\r\n        controlsRef.current.style.opacity = 0;\r\n        controlsRef.current.style.pointerEvents = \"none\";\r\n        controlsRef.current.style.cursor = \"none\";\r\n        playerContainerRef.current.style.cursor = \"none\";\r\n    }\r\n    const handleVideoClick = (e) => {\r\n        if (e.target === e.currentTarget && (isVideoStarted || iOS())) handlePlayPause()\r\n    }\r\n    const onPlay = () => {\r\n        setIsVideoEnded(false);\r\n        setState({ ...state, seeking: false });\r\n    }\r\n    const onPause = () => {\r\n        setState({ ...state, seeking: false });\r\n    }\r\n    const onEnded = () => {\r\n        updateVideoProps({ playing: false });\r\n        setIsVideoEnded(true);\r\n        if (receiving) {\r\n            updateVideoProps({ receiving: false });\r\n        } else {\r\n            // log(\"ENDING\", 'me');\r\n            if (queue.length > 0) {\r\n                updateVideoProps({ playing: true });\r\n                sendVideoState({\r\n                    eventName: 'syncLoadFromQueue',\r\n                    eventParams: {\r\n                        queue: queue,\r\n                    }\r\n                });\r\n                loadFromQueue(queue);\r\n            }\r\n        }\r\n    }\r\n    const onReady = () => {\r\n        if (receiving) {\r\n            loadVideo(history[0], true);\r\n            if (!playing) setIsVideoStarted(true);\r\n            else setIsVideoStarted(false);\r\n        }\r\n    }\r\n    const onStart = () => {\r\n        if (!receiving)\r\n            setIsVideoStarted(true);\r\n    }\r\n\r\n    const code = (e) => {\r\n        e = e || window.event;\r\n        return (e.key || e.keyCode || e.which);\r\n    }\r\n    const setKeyboardShortcuts = (e) => {\r\n        e.preventDefault();\r\n        let key = code(e);\r\n        // console.log(key);\r\n        switch (key) {\r\n            // case ' ':\r\n            // case 'k':\r\n            //     handlePlayPause()\r\n            //     break;\r\n            // case 'm':\r\n            //     handleMute();\r\n            //     break;\r\n            case 'ArrowLeft':\r\n            case 'j':\r\n                handleRewind();\r\n                break;\r\n            case 'ArrowRight':\r\n            case 'l':\r\n                handleFastForward();\r\n                break;\r\n            case 'f':\r\n                toggleFullScreen();\r\n                break;\r\n            // case 'i':\r\n            //     // enablePip();\r\n            //     break;\r\n            // case 'c':\r\n            //     // enable captions\r\n            //     break;\r\n            // case 'ArrowUp':\r\n            //     handleVolumeChange([volume + 0.2]);\r\n            //     break;\r\n            // case 'ArrowDown':\r\n            //     handleVolumeChange([volume - 0.2]);\r\n            //     break;\r\n            default:\r\n                break\r\n            // // Is a number\r\n            // if (isFinite(key)) {\r\n            // }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        // let clickCount = 0;\r\n        // let singleClickTimer;\r\n        const handleClickFocus = (e) => {\r\n            let player = playerContainerRef.current;\r\n            if (!player) return;\r\n            if (!player.contains(e.target)) {\r\n                document.removeEventListener('keydown', setKeyboardShortcuts);\r\n            } else if (e.target.classList.contains('videoPlayerContainer')) {\r\n                document.addEventListener('keydown', setKeyboardShortcuts);\r\n                // clickCount++;\r\n                // if (clickCount === 1) {\r\n                //     singleClickTimer = setTimeout(function () {\r\n                //         clickCount = 0;\r\n                //         // handleVideoClick();\r\n                //     }, 300);\r\n                // } else if (clickCount === 2) {\r\n                //     clearTimeout(singleClickTimer);\r\n                //     clickCount = 0;\r\n                //     toggleFullScreen();\r\n                // }\r\n            }\r\n        }\r\n        document.addEventListener('click', handleClickFocus);\r\n        return () => {\r\n            document.removeEventListener('click', handleClickFocus);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                onMouseMove={handleMouseMove}\r\n                onMouseLeave={handleMouseLeave}\r\n                ref={playerContainerRef}\r\n                className='videoPlayerContainer'\r\n                style={{ display: initVideo ? 'block' : 'none' }}\r\n                onClick={handleVideoClick}\r\n            >\r\n                <ReactPlayer\r\n                    ref={playerRef}\r\n                    className='videoPlayer'\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                    url={history[0] ? history[0].video.url : ''}\r\n                    pip={pip}\r\n                    playing={playing}\r\n                    controls={false}\r\n                    light={light}\r\n                    loop={false}\r\n                    playbackRate={playbackRate}\r\n                    volume={volume}\r\n                    muted={muted}\r\n                    onProgress={handleProgress}\r\n                    onEnded={onEnded}\r\n                    onReady={onReady}\r\n                    onStart={onStart}\r\n                    onPlay={onPlay}\r\n                    onPause={onPause}\r\n                    config={{\r\n                        file: {\r\n                            attributes: {\r\n                                crossOrigin: \"anonymous\",\r\n                            },\r\n                        },\r\n                        vimeo: { playerOptions: { controls: false } },\r\n                        soundcloud: {\r\n                            options: {\r\n                                buying: false,\r\n                                sharing: false,\r\n                                download: false,\r\n                            }\r\n                        }\r\n                    }}\r\n                />\r\n                <Controls\r\n                    ref={controlsRef}\r\n                    onSeekMouseDown={handleSeekMouseDown}\r\n                    onSeekMouseUp={handleSeek}\r\n                    onRewind={handleRewind}\r\n                    onPlayPause={handlePlayPause}\r\n                    onFastForward={handleFastForward}\r\n                    playing={playing}\r\n                    onMute={handleMute}\r\n                    muted={muted}\r\n                    onVolumeChange={handleVolumeChange}\r\n                    playbackRate={playbackRate}\r\n                    onPlaybackRateChange={handlePlaybackRate}\r\n                    onToggleFullScreen={toggleFullScreen}\r\n                    volume={volume}\r\n                    currentTime={currentTime}\r\n                    duration={duration}\r\n                    seekTime={seekTime}\r\n                    seeking={seeking}\r\n                    isFullscreen={isFullscreen}\r\n                    jumpedTime={jumpedTime}\r\n                    videoType={videoType}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Player;","H:\\movie-party\\client\\src\\components\\Video\\Search\\Search.js",[],"H:\\movie-party\\client\\src\\components\\Video\\Video.js",["127","128"],"import React, { useEffect } from \"react\";\r\nimport { Button, Divider, Grid, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport { sckt } from '../Socket';\r\nimport './Video.scss';\r\nimport { insert } from '../../utils/video';\r\nimport VideoSearch from './Search/Search';\r\nimport VideoPlayer from \"./Player/Player\";\r\n\r\nconst Video = ({ log, name, room, videoProps, updateVideoProps, playerRef, sendVideoState, loadVideo, playVideoFromSearch }) => {\r\n    const loadFromQueue = (queue, sync = false) => {\r\n        let nextVideo = queue.shift(); // Remove from beginning of queue\r\n        if (nextVideo !== undefined) {\r\n            loadVideo(nextVideo, sync);\r\n            updateVideoProps({ queue });\r\n            updateVideoProps({ history: [nextVideo, ...videoProps.history] });\r\n        }\r\n    }\r\n    const modifyVideoState = (paramsToChange) => {\r\n        if (playerRef.current !== null) {\r\n            const { playing, seekTime, playbackRate } = paramsToChange;\r\n            if (playing !== undefined) {\r\n                updateVideoProps({ playing });\r\n                // } else if (playbackRate !== undefined) {\r\n                //     player.setPlaybackRate(playbackRate);\r\n            }\r\n            if (seekTime !== undefined) {\r\n                playerRef.current.seekTo(seekTime);\r\n            }\r\n        }\r\n    }\r\n    const addVideoToQueue = (searchItem) => {\r\n        let { queue } = videoProps;\r\n        let updatedQueue = insert(queue, queue.length, searchItem)\r\n        sendVideoState({\r\n            eventName: \"syncQueue\",\r\n            eventParams: {\r\n                queue: updatedQueue,\r\n                type: \"add\"\r\n            }\r\n        });\r\n        updateVideoProps({ queue: updatedQueue });\r\n    }\r\n    // // Debugging\r\n    // useEffect(() => {\r\n    //     console.log(\"Queue: \", videoProps.queue);\r\n    // }, [videoProps.queue])\r\n    // useEffect(() => {\r\n    //     console.log(\"History: \", videoProps.history);\r\n    // }, [videoProps.history])\r\n\r\n    useEffect(() => {\r\n        // Send videoProps to new user\r\n        const getSyncHandler = ({ id }) => {\r\n            log(\"New user needs videoProps to sync.\", 'server');\r\n            if (playerRef.current !== null) {\r\n                let params = {\r\n                    id: id,\r\n                    ...videoProps,\r\n                    seekTime: playerRef.current.getCurrentTime(),\r\n                    receiving: true\r\n                }\r\n                sckt.socket.emit('sendSync', params, (error) => { });\r\n            }\r\n        }\r\n        sckt.socket.on(\"getSync\", getSyncHandler);\r\n        return () => {\r\n            sckt.socket.off('getSync', getSyncHandler);\r\n        };\r\n    });\r\n    useEffect(() => {\r\n        // Sync other user's videoProps to our state\r\n        const startSyncHandler = (videoProps) => {\r\n            log(\"I'm syncing.\", 'server');\r\n            updateVideoProps({ ...videoProps });\r\n            modifyVideoState({ ...videoProps });\r\n            // loadVideo(videoProps.history[0], true);\r\n        };\r\n        // Update single value in videoProps from other user\r\n        const receiveVideoStateHandler = ({ name, room, eventName, eventParams = {} }) => {\r\n            const { seekTime, playbackRate, queue, searchItem, history } = eventParams;\r\n            updateVideoProps({ receiving: true });\r\n            switch (eventName) {\r\n                case 'syncPlay':\r\n                    updateVideoProps({ playing: true });\r\n                    modifyVideoState({ playing: true });\r\n                    break;\r\n                case 'syncSeek':\r\n                    updateVideoProps({ seekTime });\r\n                    modifyVideoState({ seekTime });\r\n                    break;\r\n                case 'syncPause':\r\n                    updateVideoProps({ playing: false, seekTime });\r\n                    modifyVideoState({ playing: false, seekTime });\r\n                    break;\r\n                case 'syncRateChange':\r\n                    updateVideoProps({ playbackRate });\r\n                    modifyVideoState({ playbackRate });\r\n                    break;\r\n                case 'syncLoad':\r\n                    loadVideo(searchItem, false);\r\n                    updateVideoProps({ history });\r\n                    break;\r\n                case 'syncLoadFromQueue':\r\n                    loadFromQueue(queue);\r\n                    break;\r\n                case 'syncQueue':\r\n                    updateVideoProps({ queue });\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        };\r\n\r\n        sckt.socket.on(\"startSync\", startSyncHandler);\r\n        sckt.socket.on(\"receiveVideoState\", receiveVideoStateHandler);\r\n        return () => {\r\n            sckt.socket.off('startSync', startSyncHandler);\r\n            sckt.socket.off('receiveVideoState', receiveVideoStateHandler);\r\n        };\r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n    //     console.log(videoProps.playing);\r\n    // }, [videoProps.playing])\r\n\r\n    return (\r\n        <div className=\"videoContainer\">\r\n            <VideoPlayer\r\n                videoProps={videoProps}\r\n                sendVideoState={sendVideoState}\r\n                updateVideoProps={updateVideoProps}\r\n                playerRef={playerRef}\r\n                loadVideo={loadVideo}\r\n                loadFromQueue={loadFromQueue}\r\n            />\r\n            <VideoSearch\r\n                addVideoToQueue={addVideoToQueue}\r\n                playVideoFromSearch={playVideoFromSearch}\r\n                updateVideoProps={updateVideoProps}\r\n            />\r\n            <Segment placeholder>\r\n                <Grid columns={2} stackable textAlign='center'>\r\n                    <Divider vertical>Or</Divider>\r\n\r\n                    <Grid.Row verticalAlign='middle'>\r\n                        <Grid.Column>\r\n                            <Header icon>\r\n                                <Icon name='search' />\r\n                                Search for a YouTube video\r\n                            </Header>\r\n                            <Button onClick={() => { document.getElementById(\"searchInput\").focus(); }}>Search above!</Button>\r\n                        </Grid.Column>\r\n\r\n                        <Grid.Column>\r\n                            <Header icon>\r\n                                <div className=\"actionIcons\">\r\n                                    <Icon name='youtube' onClick={() => { window.open('https://youtube.com', '_blank'); }} />\r\n                                    <Icon name='vimeo' onClick={() => { window.open('https://vimeo.com/search', '_blank'); }} />\r\n                                    <Icon name='twitch' onClick={() => { window.open('https://twitch.tv', '_blank'); }} />\r\n                                </div>\r\n                                Paste a video link\r\n                            </Header>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Segment>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Video;","H:\\movie-party\\client\\src\\components\\Video\\Player\\Slider.js",[],"H:\\movie-party\\client\\src\\components\\Video\\Search\\SearchResults\\SearchResults.js",[],"H:\\movie-party\\client\\src\\components\\Video\\Search\\SearchResults\\ListItem.js",[],"H:\\movie-party\\client\\src\\components\\Panel\\QueueHistory\\QueueList.js",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"129","replacedBy":"133"},{"ruleId":"131","replacedBy":"134"},{"ruleId":"129","replacedBy":"135"},{"ruleId":"131","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":177,"column":8,"nodeType":"139","endLine":177,"endColumn":36,"suggestions":"140"},{"ruleId":"129","replacedBy":"141"},{"ruleId":"131","replacedBy":"142"},{"ruleId":"129","replacedBy":"143"},{"ruleId":"131","replacedBy":"144"},{"ruleId":"137","severity":1,"message":"145","line":199,"column":8,"nodeType":"139","endLine":199,"endColumn":10,"suggestions":"146"},{"ruleId":"137","severity":1,"message":"147","line":329,"column":8,"nodeType":"139","endLine":329,"endColumn":10,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":20,"column":40,"nodeType":"151","messageId":"152","endLine":20,"endColumn":52},{"ruleId":"137","severity":1,"message":"153","line":120,"column":8,"nodeType":"139","endLine":120,"endColumn":10,"suggestions":"154"},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],["155"],["156"],["155"],["156"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currUser.colors', 'currUser.name', 'location.state', and 'match.params.roomName'. Either include them or remove the dependency array.","ArrayExpression",["157"],["155"],["156"],["155"],["156"],"React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["158"],"React Hook useEffect has a missing dependency: 'setKeyboardShortcuts'. Either include it or remove the dependency array.",["159"],"no-unused-vars","'playbackRate' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'loadFromQueue', 'loadVideo', 'log', 'modifyVideoState', and 'updateVideoProps'. Either include them or remove the dependency array. If 'log' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["160"],"no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},"Update the dependencies array to be: [location.pathname, history, match.params.roomName, location.state, currUser.name, currUser.colors]",{"range":"169","text":"170"},"Update the dependencies array to be: [state]",{"range":"171","text":"172"},"Update the dependencies array to be: [setKeyboardShortcuts]",{"range":"173","text":"174"},"Update the dependencies array to be: [loadFromQueue, loadVideo, log, modifyVideoState, updateVideoProps]",{"range":"175","text":"176"},[6967,6995],"[location.pathname, history, match.params.roomName, location.state, currUser.name, currUser.colors]",[6098,6100],"[state]",[10489,10491],"[setKeyboardShortcuts]",[4850,4852],"[loadFromQueue, loadVideo, log, modifyVideoState, updateVideoProps]"]